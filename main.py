# Problem 45:
#     Triangular, Pentagonal, Hexagonal
#
# Description:
#     Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:#
#       * Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
#       * Pentagonal    Pn=n(3n−1)/2 	1, 5, 12, 22, 35, ...
#       * Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
#
#     It can be verified that T285 = P165 = H143 = 40755.
#
#     Find the next triangle number that is also pentagonal and hexagonal.

from math import floor, sqrt
from typing import Tuple


def pentagonal_index(x: int) -> int:
    """
    Returns `i` such that pentagonal number P_i equals `x`, if such `i` exists.
    If `x` not pentagonal, return -1.

    Args:
        x (int): Natural number

    Returns:
        (int): If `x` pentagonal, then `i` such that x = P_i, else -1

    Raises:
        AssertError: if incorrect args are given
    """
    assert type(x) == int and x > 0
    # Idea:
    #     If `x` were a pentagonal number, then we must have
    #       x = i * (3*i-1) / 2, for some natural number `i`.
    #     Solving this for `i`, using the quadratic formula, we get:
    #       i = (1 + sqrt(1 + 24*x)) / 6
    #
    #     So if `i` turns out to be a whole number, x is indeed a pentagonal number.
    i = (1 + sqrt(1 + 24*x)) / 6

    return int(i) if floor(i) == i else -1


def hexagonal_index(x: int) -> int:
    """
    Returns `i` such that hexagonal number H_i equals `x`, if such `i` exists.
    If `x` not hexagonal, return -1.

    Args:
        x (int): Natural number

    Returns:
        (int): If `x` hexagonal, then `i` such that x = H_i, else -1

    Raises:
        AssertError: if incorrect args are given
    """
    assert type(x) == int and x > 0
    # Idea:
    #     If `x` were a hexagonal number, then we must have
    #       x = i * (2*i-1), for some natural number `i`.
    #     Solving this for `i`, using the quadratic formula, we get:
    #       i = (1 + sqrt(1 + 8x)) / 4
    #
    #     So if `i` turns out to be a whole number, x is indeed a hexagonal number.
    i = (1 + sqrt(1 + 8 * x)) / 4

    return int(i) if floor(i) == i else -1


def main() -> Tuple[int, int, int, int]:
    """
    Returns the next number after 40,755 which is triangular, pentagonal, and hexagonal.

    Returns:
        (Tuple[int, int, int, int]): Next largest triangular/pentagonal/hexagonal number after 40,755
    """
    i = 285
    x = 40755
    while True:
        i += 1
        x += i
        j = pentagonal_index(x)
        if j != -1:
            k = hexagonal_index(x)
            if k != -1:
                return i, j, k, x


if __name__ == '__main__':
    t_i, p_j, h_k, next_tph_num = main()
    print('Next triangular/pentagonal/hexagonal number after 40,755:')
    print('  T_{} = P_{} = H_{} = {}'.format(t_i, p_j, h_k, next_tph_num))
